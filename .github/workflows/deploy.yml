name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: 9.0.x

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore ClientPortal.sln
      
    - name: Build solution
      run: dotnet build ClientPortal.sln --no-restore --configuration Release
      
    - name: Run tests (if any)
      run: dotnet test ClientPortal.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      continue-on-error: true
      
    - name: Build Docker image (test)
      if: github.event_name == 'pull_request'
      run: |
        docker build -t test-image .
        echo "‚úÖ Docker build successful"

  deploy-info:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deployment notification
      run: |
        echo "üöÄ Deployment triggered for main branch"
        echo "Railway will automatically deploy via GitHub integration"
        echo "Render will automatically deploy via GitHub integration"
        echo ""
        echo "Expected deployment URLs:"
        echo "Railway: Check your Railway dashboard"
        echo "Render: Check your Render dashboard"
        echo ""
        echo "Health check endpoints:"
        echo "- /health (main health check)"
        echo "- /swagger (development only)"

  security-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for secrets in code
      run: |
        echo "üîç Checking for potential secrets..."
        
        # Check if any appsettings files with secrets are accidentally committed
        if find . -name "appsettings.Development.json" -o -name "appsettings.Production.json" | grep -q .; then
          echo "‚ùå WARNING: Sensitive appsettings files found!"
          find . -name "appsettings.Development.json" -o -name "appsettings.Production.json"
          echo "These files should not be committed to version control."
          exit 1
        else
          echo "‚úÖ No sensitive appsettings files found"
        fi
        
        # Check for potential hardcoded passwords or keys
        if grep -r -E "(password|pwd|secret|key|token).*=.*['\"][^'\"]{8,}" --include="*.cs" --include="*.json" . | grep -v "// Example" | grep -v "// TODO"; then
          echo "‚ùå WARNING: Potential hardcoded secrets found!"
          echo "Please use environment variables for sensitive data."
        else
          echo "‚úÖ No obvious hardcoded secrets detected"
        fi
        
        echo "üîí Security check completed"

  deployment-validation:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-check]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 60
        
    - name: Validate deployment checklist
      run: |
        echo "üìã Post-deployment validation checklist:"
        echo ""
        echo "Manual checks required:"
        echo "1. ‚úÖ Check Railway logs for successful startup"
        echo "2. ‚úÖ Check Render logs for successful startup"
        echo "3. ‚úÖ Test health endpoint: [YOUR_RAILWAY_URL]/health"
        echo "4. ‚úÖ Test health endpoint: [YOUR_RENDER_URL]/health"
        echo "5. ‚úÖ Verify database connection in logs"
        echo "6. ‚úÖ Test JWT token functionality"
        echo "7. ‚úÖ Verify CORS configuration"
        echo "8. ‚úÖ Test file upload functionality"
        echo ""
        echo "Expected health response:"
        echo '{'
        echo '  "Status": "Healthy",'
        echo '  "Environment": "Production",'
        echo '  "Timestamp": "2025-XX-XXTXX:XX:XX.XXXZ",'
        echo '  "DatabaseConfigured": true,'
        echo '  "JwtConfigured": true'
        echo '}'
        echo ""
        echo "If any checks fail, check the deployment logs and environment variables."